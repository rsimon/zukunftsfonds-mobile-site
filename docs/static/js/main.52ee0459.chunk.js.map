{"version":3,"sources":["store/State.js","i18n/index.js","search/ResultList.jsx","profiles/ActorProfile.jsx","profiles/Utils.js","profiles/PlaceProfile.jsx","search/SearchPage.jsx","SideMenu.jsx","splash/SplashPage.jsx","App.js","serviceWorker.js","store/DataStore.js","index.js","i18n sync /^/.//messages_.*/.json$"],"names":["languageState","atom","key","default","searchQueryState","searchResultState","i18n","loadMessages","lang","messages","require","t","label","this","ICONS","ResultList","props","Row","index","style","item","results","className","onClick","onSelect","modifier","icon","crmClass","properties","title","height","width","itemCount","length","itemSize","ActorProfile","store","navigator","residences","getResidences","renderToolbar","description","map","d","idx","value","r","navigateTo","geometry","PROFILE_COMPONENTS","mapRef","useRef","useEffect","current","leafletElement","fitBounds","geojson","corners","bbox","getBounds","actors","getActors","Map","ref","zoomControl","TileLayer","attribution","url","GeoJSON","data","actor","getProfileComponent","_","pushPage","component","relations","filter","rel","relationType","getPlaceWithLocation","relationTo","place","location","find","getActorsWithResidence","SearchPage","language","useRecoilValue","search","setSearch","useSetRecoilState","setResults","onSearch","evt","query","target","toLowerCase","searchAll","onClearSearch","placeholder","onChange","result","SideMenu","setLanguage","inputId","name","checked","htmlFor","SplashPage","useState","isMenuOpen","setMenuOpen","images","src","position","mouseTracking","autoWidth","autoHeight","disableDotsControls","disableButtonsControls","paddingLeft","paddingRight","items","animation","mode","side","collapse","isOpen","onClose","App","renderPage","route","React","createElement","uuid","initialRoute","swipeable","Boolean","window","hostname","match","DataStore","events","places","JsSearch","tokenizer","tokenize","text","split","addIndex","loadFile","entityType","axios","get","then","response","reduce","next","concat","features","Promise","all","arr","addDocuments","id","i","Launcher","isLoading","setIsLoading","load","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","console","message","webpackContext","req","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports"],"mappings":"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","file":"static/js/main.52ee0459.chunk.js","sourcesContent":["import { atom } from 'recoil';\n\nexport const languageState = atom({\n  key: 'language',\n  default: 'en'\n});\n\nexport const searchQueryState = atom({\n  key: 'searchQuery',\n  default: ''\n});\n\nexport const searchResultState = atom({\n  key: 'searchResults',\n  default: []\n});","class I18N {\n\n  constructor() {\n    this.messages = {};\n\n    // For potential future extension\n    this.loadMessages('de');\n  }\n\n  loadMessages = lang => {\n    this.messages[lang] = require(`./messages_${lang}.json`);\n  }\n\n  t = (label, lang) =>\n    lang in this.messages && label in this.messages[lang] ?\n      this.messages[lang][label] : label;\n\n}\n\nconst i18n = new I18N();\n\nexport default i18n;","import React from 'react';\nimport { FixedSizeList as List } from 'react-window';\nimport { Icon, Ripple } from 'react-onsenui';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport './ResultList.scss';\n\nconst ICONS = {\n  'crm:E18_Physical_Thing': 'md-pin',\n  'crm:E21_Person': 'md-account',\n  'crm:E74_Group': 'md-accounts'\n}\n\nconst ResultList = props => {\n\n  const Row = ({ index, style }) => {\n    const item = props.results[index];\n\n    return (<div \n      className=\"search-result\" \n      style={style}\n      onClick={() => props.onSelect(props.results[index])}>\n\n      <Ripple modifier=\"light-gray\" />\n\n      <Icon icon={ICONS[item.crmClass]} />\n\n      <label>{item.properties.title}</label>\n    </div>)\n  }\n\n  return (\n    <div className=\"search-results\">\n      <AutoSizer>\n        {({ height, width}) => (\n          <List \n            height={height}\n            itemCount={props.results.length}\n            itemSize={58}\n            width={width}>\n            {Row}\n          </List>\n          )\n        }\n      </AutoSizer>\n    </div>\n  )\n\n}\n\nexport default ResultList;","import React from 'react';\nimport { BackButton, Page, Toolbar } from 'react-onsenui';\nimport { getResidences, navigateTo } from './Utils';\n\nconst ActorProfile = props => {\n\n  const { item, store, navigator } = props;\n\n  const residences = getResidences(item, store);\n\n  return (\n    <Page \n      className=\"profile place\"\n      renderToolbar={() => \n        <Toolbar>\n          <div className=\"left\">\n            <BackButton>Back</BackButton>\n          </div>\n          <div className=\"center\">\n            { item.properties.title }\n          </div>\n        </Toolbar>\n      }>\n\n      {item.description.map((d, idx) => \n        <div key={idx} className=\"description\">{d.value}</div>\n      )}\n\n      {residences.map((r, idx) =>\n        <div key={idx} className=\"residence\" onClick={navigateTo(r, navigator)}>\n          <span className=\"title\">{r.properties.title}</span>\n          { r.geometry?.title && <span className=\"location\">{r.geometry.title}</span> }\n        </div>\n      )}\n    </Page>\n  )\n\n}\n\nexport default ActorProfile;","import ActorProfile from '../profiles/ActorProfile';\nimport PlaceProfile from '../profiles/PlaceProfile';\n\nconst PROFILE_COMPONENTS = {\n  'crm:E18_Physical_Thing': PlaceProfile,\n  'crm:E21_Person': ActorProfile\n}\n\n/** Returns the right JSX profile component for this item **/\nexport const getProfileComponent = item => PROFILE_COMPONENTS[item.crmClass];\n\n/** Returns a handler function for navigating to the view appropriate to the given item **/\nexport const navigateTo = (item, navigator) => _ =>\n  navigator.pushPage({ component: getProfileComponent(item), item });\n\n/** Returns the residences linked to an actor **/\nexport const getResidences = (actor, store) => {\n  // CRM 'hasCurrentOrFormerResidence' relations on actor (if any)\n  const residences = actor.relations.filter(rel =>\n    rel.relationType === 'crm:P74_has_current_or_former_residence');\n\n  // Relation points to location -> get place\n  return residences.map(rel =>\n    store.getPlaceWithLocation(rel.relationTo));\n}\n\n/** Returns the actors linke to a place **/\nexport const getActors = (place, store) => {\n  // CRM 'hasFormerOrCurrentLocation' relations on place (if any)\n  const location = place.relations.find(rel =>\n    rel.relationType === 'crm:P53_has_former_or_current_location');\n\n  return location?.relationTo ? store.getActorsWithResidence(location.relationTo) : [];\n}\n\n","import React, { useEffect, useRef } from 'react';\nimport { BackButton, Page, Toolbar } from 'react-onsenui';\nimport { GeoJSON, Map, TileLayer } from 'react-leaflet';\nimport bbox from '@turf/bbox';\nimport { getActors, navigateTo } from './Utils';\n\nimport 'leaflet/dist/leaflet.css';\n\nconst getBounds = geojson => {\n  const corners = bbox(geojson);\n  return [ // Leaflet order\n    [ corners[1], corners[0] ],\n    [ corners[3], corners[2] ]\n  ];\n}\n\nconst PlaceProfile = props => {\n\n  const mapRef = useRef();\n\n  const { item, navigator, store } = props;\n\n  useEffect(() => {\n    if (mapRef.current) {\n      const map = mapRef.current.leafletElement;\n      map.fitBounds(getBounds(item));\n    }\n  }, [ item ]);\n\n  const actors = getActors(item, store);\n\n  return (\n    <Page \n      className=\"profile place\"\n      renderToolbar={() => \n        <Toolbar>\n          <div className=\"left\">\n            <BackButton>Back</BackButton>\n          </div>\n          <div className=\"center\">\n            { item.properties.title }\n          </div>\n        </Toolbar>\n      }>\n\n      <div className=\"map-container\">\n        <Map \n          ref={mapRef}\n          zoomControl={false}\n          style={{height:'200px'}}>\n          <TileLayer\n            attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          />\n          <GeoJSON data={item} />\n        </Map>\n      </div>\n      {item.description.map((d, idx) => \n        <div key={idx} className=\"description\">{d.value}</div>\n      )}\n\n      {actors.map((actor, idx) =>\n        <div key={idx} className=\"actor\" onClick={navigateTo(actor, navigator)}>\n          <span className=\"title\">{actor.properties.title}</span>\n        </div>\n      )}\n    </Page>\n  )\n\n}\n\nexport default PlaceProfile;","import React from 'react';\nimport { BackButton, Icon, Page, Input, Toolbar, ToolbarButton } from 'react-onsenui';\nimport ResultList from './ResultList';\nimport { getProfileComponent } from '../profiles/Utils';\nimport { useRecoilValue, useSetRecoilState } from 'recoil';\nimport { languageState, searchQueryState, searchResultState } from '../store/State';\nimport i18n from '../i18n';\n\nimport './SearchPage.scss';\n\nconst SearchPage = props => {\n\n  const language = useRecoilValue(languageState);\n\n  // We'll keep search state global, so we can persist across page navigation\n  const search = useRecoilValue(searchQueryState);\n  const setSearch = useSetRecoilState(searchQueryState);\n  \n  const results = useRecoilValue(searchResultState);\n  const setResults = useSetRecoilState(searchResultState);\n\n  const onSearch = evt => {\n    const query = evt.target.value.toLowerCase();\n\n    // For some weird reason, OnsenUI SearchInput also triggers\n    // onChange when losing focus, causing an unwanted re-render\n    if (search !== query) {\n      setSearch(query);\n\n      const results = props.store.searchAll(query);\n      setResults(results);\n    }\n  }\n\n  const onSelectResult = result =>\n    props.navigator.pushPage({ \n      component: getProfileComponent(result), \n      item: result \n    });\n\n  const onClearSearch = () => {\n    setSearch('');\n    setResults([]);\n  }\n\n  return (\n    <Page\n      className=\"search\"\n      renderToolbar={() => \n        <Toolbar>\n          <div className=\"left\">\n            <BackButton />\n          </div>\n\n          <div className=\"center\">\n            <Input\n              value={search}\n              placeholder={i18n.t('Search', language)}\n              onChange={onSearch} />\n          </div>\n          \n          <div className=\"right\">\n            <ToolbarButton>\n              <Icon icon=\"md-close\" onClick={onClearSearch} />\n            </ToolbarButton>\n          </div>\n        </Toolbar>\n      }>\n\n      <ResultList\n        results={results} \n        onSelect={onSelectResult} />\n    </Page>\n  )\n\n}\n\nexport default SearchPage;","import React from 'react';\nimport { Icon, List, ListHeader, ListItem, Page, Radio } from 'react-onsenui';\nimport { useRecoilValue, useSetRecoilState } from 'recoil';\nimport { languageState } from './store/State';\nimport i18n from './i18n';\nimport SearchPage from './search/SearchPage';\n\nimport './SideMenu.scss';\n\nconst SideMenu = props => {\n\n  const language = useRecoilValue(languageState);\n\n  const setLanguage = useSetRecoilState(languageState);\n\n  const onSearch = () =>\n    props.navigator.pushPage({ component: SearchPage });\n\n  return (\n    <Page className=\"side-menu\">\n      <List>\n        <ListItem onClick={onSearch}>\n          <Icon icon=\"md-search\" />\n          <label>{i18n.t('Search', language)}</label>\n        </ListItem>\n      </List>\n\n      <List>\n        <ListHeader>\n          <Icon icon=\"md-info-outline\" />\n          <label>{i18n.t('Information', language)}</label>\n        </ListHeader>\n\n        <ListItem>\n          <label>{i18n.t('Help', language)}</label>\n        </ListItem>  \n\n        <ListItem className=\"projects\">\n          <div>\n            <label>{i18n.t('Projects', language)}</label>\n            <ul>\n              <li>Orthodoxes Wien</li>\n              <li>Oberhollabrunn</li>\n            </ul>\n          </div>\n        </ListItem>\n        \n        <ListItem>\n          <label>{i18n.t('About Us', language)}</label>\n        </ListItem>\n      </List>\n      \n      <List>\n        <ListHeader>\n          <Icon icon=\"md-walk\" />\n          <label>{i18n.t('Walking Tours', language)}</label>\n        </ListHeader>\n        \n        <ListItem>\n          <label>Oberhollabrunn</label>\n        </ListItem>\n      </List>\n\n      <List className=\"set-language\">\n        <ListHeader>\n          <Icon icon=\"md-translate\" />\n          <label>{i18n.t('Language', language)}</label>\n        </ListHeader>\n        \n        <ListItem>\n          <label className=\"left\">\n            <Radio \n              inputId='EN' \n              name='EN' \n              onChange={() => setLanguage('en')} \n              checked={language === 'en'} />\n          </label>\n          \n          <label htmlFor='EN' className=\"center\">\n            English\n          </label>\n        </ListItem>\n        <ListItem>\n          <label className=\"left\">\n            <Radio \n              inputId='DE' \n              name='DE' \n              onChange={() => setLanguage('de')} \n              checked={language === 'de'} />\n          </label>\n          \n          <label htmlFor='DE' className=\"center\">\n            Deutsch\n          </label>\n        </ListItem>\n      </List>\n    </Page>\n  )\n\n}\n\nexport default SideMenu;","import React, { useState } from 'react';\nimport { Icon, Page, Splitter, SplitterContent, SplitterSide, Toolbar, ToolbarButton } from 'react-onsenui';\nimport AliceCarousel from 'react-alice-carousel';\nimport SideMenu from '../SideMenu';\n\nimport 'react-alice-carousel/lib/alice-carousel.css';\n\nconst SplashPage = props => {\n\n  const [ isMenuOpen, setMenuOpen ] = useState(false);\n  \n  const images = [\n    <img src=\"https://upload.wikimedia.org/wikipedia/commons/c/cf/Hollabrunn.jpg\" />,\n    <img src=\"https://upload.wikimedia.org/wikipedia/commons/c/cf/Hollabrunn.jpg\" />,\n    <img src=\"https://upload.wikimedia.org/wikipedia/commons/c/cf/Hollabrunn.jpg\" />\n  ];\n\n  return (\n    <Page>\n      <Splitter>\n        <SplitterContent>\n          <Page \n            renderToolbar={() => \n              <Toolbar>\n                <div className=\"center\">\n                  Die Orthodoxen in Österreich\n                </div>\n                <div className=\"right\">\n                  <ToolbarButton onClick={() => setMenuOpen(true)}>\n                    <Icon icon=\"md-menu\" />\n                  </ToolbarButton>\n                </div>\n              </Toolbar>\n            }>\n\n            <div style={{height:'300px', position:'relative' }}>\n              <AliceCarousel \n                mouseTracking \n                autoWidth\n                autoHeight\n                disableDotsControls\n                disableButtonsControls\n                paddingLeft={3}\n                paddingRight={3}\n                items={images} />\n            </div>\n          </Page>\n        </SplitterContent>\n        <SplitterSide\n          animation=\"overlay\"\n          mode=\"collapse\"\n          side=\"right\"\n          collapse={true}\n          width=\"300px\"\n          isOpen={isMenuOpen}\n          onClose={() => setMenuOpen(false)}>\n\n          <SideMenu navigator={props.navigator} />\n\n        </SplitterSide>\n      </Splitter>\n    </Page>\n  )\n\n}\n\nexport default SplashPage;","import React from 'react';\nimport { RecoilRoot } from 'recoil';\nimport { Navigator } from 'react-onsenui';\nimport SplashPage from './splash/SplashPage';\nimport 'onsenui/css/onsenui.css';\nimport 'onsenui/css/onsen-css-components.css';\nimport { v4 as uuid } from 'uuid';\n\nimport './App.scss';\n\nconst App = props => {\n\n  // TODO looks like this renders multiple times!\n\n  const renderPage = (route, navigator) =>\n    React.createElement(route.component, { \n      ...route, \n      navigator, \n      key: uuid(), // Needs a key per definition and we want to re-render always\n      store: props.store\n    });\n\n  return (\n    <RecoilRoot>\n      <Navigator\n        renderPage={renderPage}\n        initialRoute={{ component: SplashPage }} \n        animation=\"slide\"\n        swipeable />\n    </RecoilRoot>\n  );\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios';\nimport * as JsSearch from 'js-search';\n\n/**\n * Because (fortunately) our data is static, the data store\n * is just a convenience wrapper over the JSON data files. \n */\nexport default class DataStore {\n\n  constructor() {\n    this.actors = [];\n    this.events = [];\n    this.places = [];\n\n    this.search = new JsSearch.Search('@id');   \n    this.search.tokenizer = {\n      tokenize(text) {\n        return text.split(/[\\s,-]+/)\n      }\n    };\n\n    this.search.addIndex([ 'properties', 'title' ]); \n  }\n\n  load() {\n    const loadFile = entityType => \n      axios.get(`/data/api/items_${entityType}.json`).then(response =>\n        response.data[0].reduce((items, next) => items.concat(next.features), []));\n    \n    const responses = Promise.all([\n      loadFile('actor'),\n      loadFile('event'),\n      loadFile('place')\n    ]);\n\n    return responses.then(arr => {\n      const [ actors, events, places ] = arr;\n      \n      this.actors = actors;\n      this.events = events;\n      this.places = places;\n\n      this.search.addDocuments([ ...actors, /* ...events ,*/ ...places ]);\n    });\n  }\n\n  findById(id) {\n    return this.items.find(i => i['@id'] === id);\n  }\n\n  searchAll(query) {\n    return this.search.search(query.toLowerCase());\n  }\n\n  getPlaceWithLocation(id) {\n    return this.places.find(place => place.relations.find(rel => \n      rel.relationTo === id && rel.relationType === 'crm:P53_has_former_or_current_location'));\n  }\n\n  getActorsWithResidence(id) {\n    return this.actors.filter(actor => actor.relations.find(rel => \n      rel.relationTo === id && rel.relationType === 'crm:P74_has_current_or_former_residence'));\n  }\n  \n}\n","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport DataStore from './store/DataStore';\n\n// A simple start helper that loads the data and then switches to the app\nconst Launcher = () => {\n\n  const [ isLoading, setIsLoading ] = useState(true);\n\n  const store = new DataStore();\n  store.load().then(() => setIsLoading(false));\n\n  return (\n    <>\n      { isLoading ? <div>Loading</div> : <App store={store} /> }\n    </>\n  )\n\n}\n\nReactDOM.render(\n  <Launcher />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","var map = {\n\t\"./messages_de.json\": 88\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 87;"],"sourceRoot":""}